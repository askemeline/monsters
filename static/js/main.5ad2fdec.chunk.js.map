{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","react_default","a","createElement","className","alt","src","concat","this","props","monster","id","name","email","Component","CardList","monsters","map","card_component","key","SearchBox","type","placeholder","onChange","handleChange","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchField","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredMonsters","filter","toLowerCase","includes","search_box_component","card_list_component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mTAceA,sMATX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,cAAcC,IAAG,wBAAAC,OAA0BC,KAAKC,MAAMC,QAAQC,GAA7C,4BAC1BV,EAAAC,EAAAC,cAAA,SAAIK,KAAKC,MAAMC,QAAQE,MACvBX,EAAAC,EAAAC,cAAA,SAAIK,KAAKC,MAAMC,QAAQG,eANZC,cCoBJC,mLAjBX,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEXI,KAAKC,MAAMO,SAASC,IAClB,SAAAP,GAAO,OACLT,EAAAC,EAAAC,cAACe,EAAD,CACEC,IAAKT,EAAQC,GACbD,QAASA,cATFI,aCYRM,0LAXX,OACEnB,EAAAC,EAAAC,cAAA,SACEC,UAAU,SACViB,KAAK,SACLC,YAAad,KAAKC,MAAMa,YACxBC,SAAUf,KAAKC,MAAMe,sBAPLV,cC2CTW,cAvCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAnB,KAAAiB,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAvB,QAaFgB,aAAe,SAACQ,GACdN,EAAKO,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtCV,EAAKW,MAAQ,CACXrB,SAAU,GACVkB,YAAa,IAJHR,mFAQM,IAAAY,EAAA9B,KAClB+B,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAAEjB,SAAU2B,uCAMpC,IAAAC,EAC2BpC,KAAK6B,MAA/BrB,EADD4B,EACC5B,SAAUkB,EADXU,EACWV,YACZW,EAAmB7B,EAAS8B,OAChC,SAAApC,GAAO,OACLA,EAAQE,KACLmC,cACAC,SAASd,EAAYa,iBAG5B,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAC8C,EAAD,CACE3B,YAAY,mBACZE,aAAchB,KAAKgB,eAErBvB,EAAAC,EAAAC,cAAC+C,EAAD,CAAUlC,SAAU6B,YAlCV/B,aCMEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.5ad2fdec.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './card.styles.css';\n\nclass Card extends Component {\n  render() {\n    return (\n      <div className='card-container '>\n        <img alt=\"monster-img\" src={`https://robohash.org/${this.props.monster.id}?set=set2&size=180x180`} />\n        <p>{this.props.monster.name}</p>\n        <p>{this.props.monster.email}</p>\n      </div>\n    );\n  }\n}\nexport default Card","import React, { Component } from 'react'\nimport './card-list.styles.css'\nimport Card from '../card/card.component'\n\nclass CardList extends Component {\n  render() {\n    return (\n      <div className='card-list'>\n        {\n          this.props.monsters.map(\n            monster => (\n              <Card\n                key={monster.id}\n                monster={monster}\n              />\n            )\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default CardList","import React, { Component } from 'react'\nimport './search-box.styles.css';\n\nclass SearchBox extends Component {\n  render() {\n    return (\n      <input\n        className='search'\n        type='search'\n        placeholder={this.props.placeholder}\n        onChange={this.props.handleChange}\n      />\n\n    )\n  }\n}\nexport default SearchBox","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n    // this.handleChange = this.handleChange.bind(this);\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }))\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(\n      monster =>\n        monster.name\n          .toLowerCase()\n          .includes(searchField.toLowerCase())\n    )\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters</h1>\n        <SearchBox\n          placeholder=\"search a monster\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}